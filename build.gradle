plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'

    id "org.flywaydb.flyway" version "10.14.0"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "rcc-kromer" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.wispforest.io' }
    maven {
        name = "alexdevs"
        url ="https://maven.alexdevs.me/releases"
    }
    maven {
        url = "https://repo.sad.ovh/releases"
    }
    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    // SOLSTICE DEPS
    maven { url 'https://maven.nucleoid.xyz' }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    // END SOLSTICE DEPS
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_mappings}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    include implementation("org.flywaydb:flyway-core:${project.flyway_version}")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"

    // SOLSTICE DEPS
    include modImplementation("me.lucko:fabric-permissions-api:${project.permissions_api_version}")
    include modImplementation("eu.pb4:placeholder-api:${project.placeholderapi_version}")
    include modImplementation("eu.pb4:sgui:${project.sgui_version}")
    // END SOLSTICE DEPS

    modImplementation "me.alexdevs:solstice:${project.solstice_version}"
    implementation "org.xerial:sqlite-jdbc:${project.sqlite_jdbc}"
    
    // START jKROMER
    implementation include("ovh.sad:jkromer:${project.jkromer_version}")

    implementation "org.java-websocket:Java-WebSocket:${project.jws_version}"
    // END jKROMER

    annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"

    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

sourceSets {
    main {
        java {
            srcDirs += 'src/generated/java'
        }
    }
}
flywayMigrate {
    doFirst {
        println "Flyway working dir: ${project.projectDir.absolutePath}"
    }
}

flyway {
    def dbFile = file("rcc-kromer2.db")  // resolves to projectDir/rcc-kromer2.db
    url = "jdbc:sqlite:${dbFile.absolutePath}"
    locations = ["filesystem:src/main/resources/db/migration"]
    driver = "org.sqlite.JDBC"
    cleanDisabled = false
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {

    }
}
